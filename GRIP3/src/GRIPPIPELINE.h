#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>



namespace grip {

/**
* A representation of the different types of blurs that can be used.
*
*/
enum BlurType {
	BOX, GAUSSIAN, MEDIAN, BILATERAL
};
/**
* GRIPPIPELINE class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class GRIPPIPELINE {
	private:
		cv::Mat cvResizeOutput;
		cv::Mat blurOutput;
		cv::Mat hsvThresholdOutput_r;
		cv::Mat hsvThresholdOutput_b;
		cv::Mat frame;

		cv::Mat cvErodeOutput;
		std::vector<std::vector<cv::Point> > findContoursOutput_r;
		std::vector<std::vector<cv::Point> > findContoursOutput_b;
		std::vector<std::vector<cv::Point> > filterContoursOutput;

		std::vector<double> aiming_pt;
		cv::VideoCapture cap;
		std::vector<std::vector<cv::Point> > table;
		cv::Point pt;
		int red_x, blue_x;

		void cvResize(cv::Mat &, cv::Size &, double , double , int , cv::Mat &);
		void blur(cv::Mat &, BlurType &, double , cv::Mat &);
		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void cvErode(cv::Mat &, cv::Mat &, cv::Point &, double , int , cv::Scalar &, cv::Mat &);
		void findContours_r(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void findContours_b(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);
		void getAimingXY(cv::Point);
		void markPoint(cv::Point , int , int , int );

	public:
		GRIPPIPELINE();
		void process_red(cv::Mat source0);
		void process_blue(cv::Mat source0);
		cv::Point getMaxCenter(std::vector<std::vector<cv::Point> > , bool );
		cv::Mat* getcvResizeOutput();
		cv::Mat* getblurOutput();
		cv::Mat* gethsvThresholdOutput_r();
		cv::Mat* gethsvThresholdOutput_b();
		cv::Mat* getcvErodeOutput();
		int serverside(void);
		std::vector<std::vector<cv::Point> >* getfindContoursOutput_r();
		std::vector<std::vector<cv::Point> >* getfindContoursOutput_b();
		std::vector<std::vector<cv::Point> >* getfilterContoursOutput();

};


} // end namespace grip


